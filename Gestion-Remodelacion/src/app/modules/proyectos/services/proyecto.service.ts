// src/app/modules/proyectos/services/proyectos.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { map, Observable } from 'rxjs';
import { Proyecto } from '../models/proyecto.model';
import { environment } from '../../../../environments/environment';
import { Page } from '../../../core/models/page.model';
import { DropdownItem } from '../../../core/models/dropdown-item.model';
import { BaseService } from '../../../core/services/base.service';
import { ApiResponse } from '../../../core/models/ApiResponse';

@Injectable({
  providedIn: 'root',
})
export class ProyectosService extends BaseService<Proyecto> {

  constructor(http: HttpClient) {
    super(http, `${environment.apiUrl}/proyectos`);
  }

    getApiUrl(): string {
    return this.apiUrl;
  }  

  getProyectosPaginated(
    page: number = 0,
    size: number = 5,
    filter: string,
    sort: string = 'nombreProyecto,asc'
  ): Observable<Page<Proyecto>> {
    let params = new HttpParams()
      .set('page', page.toString())
      .set('size', size.toString())
      .set('sort', sort); // Usar el nuevo parámetro

    if (filter) {
      params = params.set('filter', filter);
    }
    return this.http.get<ApiResponse<Page<Proyecto>>>(this.apiUrl, { params }).pipe(
      map(response => this.extractPageData(response))
    );
  }

  // Nuevo método para obtener una lista simplificada de proyectos para dropdowns
  getProyectosForDropdown(): Observable<DropdownItem[]> {
    const params = new HttpParams()
      .set('size', '1000')
      .set('sort', 'nombreProyecto,asc'); // Pide un tamaño grande y ordena

    return this.http
      .get<Page<Proyecto>>(`${this.apiUrl}`, { params })
      .pipe(
        map((page: Page<Proyecto>) =>
          page.content.map((proj: Proyecto) => ({
            id: proj.id!,
            nombre: proj.nombreProyecto,
          }))
        )
      );
  }

  getProyectoById(id: number): Observable<Proyecto> {
    return this.http.get<Proyecto>(`${this.apiUrl}/${id}`);
  }

  addProyecto(proyecto: Proyecto): Observable<Proyecto> {
    // IMPORTANT: Create a new object to avoid modifying the original 'proyecto' object
    // Remove fields that are typically backend-generated or not part of the create request DTO
    const projectToSend: Partial<Proyecto> = { ...proyecto }; // Use Partial for type safety while deleting properties
    delete projectToSend.id; // ID is generated by the backend
    delete projectToSend.nombreCliente; // Backend populates this based on idCliente
    delete projectToSend.nombreEmpleadoResponsable; // Backend populates this based on idEmpleadoResponsable
    delete projectToSend.fechaCreacion; // Backend sets creation date

    return this.http.post<Proyecto>(this.apiUrl, projectToSend);
  }

  updateProyecto(proyecto: Proyecto): Observable<Proyecto> {
    // IMPORTANT: Create a new object to avoid modifying the original 'proyecto' object
    // Remove fields that are typically backend-generated or not meant for update via frontend
    const projectToSend: Partial<Proyecto> = { ...proyecto }; // Use Partial for type safety while deleting properties
    // Do NOT delete projectToSend.id here as it's used in the URL.
    delete projectToSend.nombreCliente; // Backend might regenerate/re-fetch this
    delete projectToSend.nombreEmpleadoResponsable; // Backend might regenerate/re-fetch this
    delete projectToSend.fechaCreacion; // This field is usually immutable after creation

    return this.http.put<Proyecto>(
      `${this.apiUrl}/${proyecto.id}`,
      projectToSend
    );
  }

  deleteProyecto(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}
